#! /usr/bin/env python3

import argparse, sys, os
from polo2 import PoloConfig
from polo2 import PoloMallet
from polo2 import PoloCorpus
from polo2 import PoloRetro


def load_config(ini_file):
    if os.path.exists(ini_file)  and  os.path.isfile(ini_file):
        try:
            config = PoloConfig(ini_file)
        except ValueError as e:
            print("Can't create config.", e)
            sys.exit(1)
        except TypeError as e:
            print("You probably don't have a config.ini in this directory.", e)
            sys.exit(1)
        return config
    else:
        print("No config.ini file found. Create one or move to a directory that has one.")
        sys.exit(1)


def load_scraper(config):
    sys.path.append(config.ini['DEFAULT']['base_path'])
    try:
        from corpus.scraper import Scraper
        scraper = Scraper(config)
        print("Generating corpus file")
        scraper.make_corpus()
    except ImportError:
        print("No Scraper found. Proceeding with existing source data.")


def load_corpus(config, cache_mode = False):
    try:
        corpus = PoloCorpus(config)
    except ValueError as e:
        print("Can't create corpus object.", e)
        sys.exit(1)
    corpus.cache_mode = cache_mode
    return corpus


def load_mallet(config, this_trial='trial1'):
    try:
        mallet = PoloMallet(config, this_trial)
    except ValueError:
        print("Can't create mallet object. Most likely due to bad trial name.")
        sys.exit(1)
    mallet.cache_mode = False
    return mallet


def get_trials(config):
    try:
        trials = config.get_trial_names()
    except ValueError as e:
        print("Can't get trials.", e)
        sys.exit(1)
    return trials


def run_funcs(obj, funcs, arg_dict = {}):
    for func_name in funcs:
        try:
            func = getattr(obj, func_name)
            print('FUNC:', func.__doc__, arg_dict)
            func(**arg_dict)
        except ValueError as e:
            print("Unable to run func {}".format(func_name))
            print('ERROR:', e)


sequences = dict(corpus={}, mallet={})

sequences['corpus']['import'] = """
import_table_stopword
import_table_doc
add_table_doctoken
add_table_token
add_stems_to_token
add_tfidf_to_doctokenbow
export_mallet_corpus
""".split()

sequences['mallet']['run'] = """
mallet_train
""".split()

sequences['mallet']['import'] = """
tables_to_db
add_diagnostics
add_topic_entropy
create_table_topicpair
add_group_field_tables
add_topic_alpha_stats
add_doctopic_weight_stats
add_doctopic_entropy_stats
# add_topic_significance
add_topic_glosses
del_mallet_files
""".split()


if __name__ == '__main__':

    # Main parser app
    parser = argparse.ArgumentParser(description='Welcome to Polo')
    parser.add_argument("--ini", help="Path to ini file (default: ./config.ini)", action="store",
                        default='./config.ini')

    # Subparsers for specific activities
    subparsers = parser.add_subparsers(title="Actions", help='Select an action', dest='cmd')

    # SETUP
    parser_setup = subparsers.add_parser('setup', help='Set up a project directory')
    parser_setup.add_argument('project',
                              help="Short name of project (no spaces, etc.)", action='store')

    # INI
    parser_ini = subparsers.add_parser('ini', help='Create a config file')
    parser_ini.add_argument('-n', '--name',
                            help="Name of config file if not `config.ini`.", action='store')

    # INFO
    parser_info = subparsers.add_parser('info', help='Get project info')
    parser_info.add_argument('item', choices=['trials', 'mallet', 'nltk'])

    # CORPUS
    parser_corpus = subparsers.add_parser('corpus', help='Generates a corpus db')

    # TEST
    parser_test = subparsers.add_parser('test', help='Runs a test block (varies)')

    # MALLET
    parser_mallet = subparsers.add_parser('mallet', help='Runs mallet based on ini and saves to db')
    parser_mallet.add_argument('trial', help="Trial name (see ini)", action="store", type=str, nargs='?', default=None)
    parser_mallet.add_argument('-t', "--topics", help="Number of topics (override ini)", action="store", type=int)
    parser_mallet.add_argument('-i', "--iters", help="Number of iterations (override ini)", action="store", type=int)

    # RETRO
    parser.retro = subparsers.add_parser('retro',
                                         help='Combines the corpus and model dbs for use in older Polo')
    parser.retro.add_argument('-c', '--corpus_dbfile', help="Corpus database name", action="store",
                            type=str, default=None)
    parser.retro.add_argument('-m', '--model_dbfile', help="Mallet model database name", action="store",
                            type=str, default=None)

    # SEQUENCE
    parser.sequence = subparsers.add_parser('sequence', help='Run a sequence of commands')
    parser.sequence.add_argument('obj', choices=sequences.keys())
    parser.sequence.add_argument('seq')

    # FUNCTION
    parser.sequence = subparsers.add_parser('function', help='Run a function')
    parser.sequence.add_argument('obj', choices=['corpus', 'mallet'])
    parser.sequence.add_argument('func')
    parser.sequence.add_argument('trial', default='trial1')

    # ALL
    parser.sequence = subparsers.add_parser('all', help='Run corpus and mallet with default settings')

    # Run the app
    args = parser.parse_args()

    # Run actions
    if args.cmd == 'corpus':

        print("Importing config")
        config = load_config(args.ini)

        print("Initializing corpus")
        corpus = load_corpus(config)

        if 'use_stopwords' in config.ini['DEFAULT'] and int(config.ini['DEFAULT']['use_stopwords']) == 1:
            run_funcs(corpus, ['import_table_stopword'], arg_dict=dict(use_nltk=True))

        funcs = """
        import_table_doc
        add_table_doctoken
        add_table_token
        add_stems_to_token
        add_tfidf_to_doctokenbow
        add_pca_tables
        add_word2vec_table
        """.split()
        
        run_funcs(corpus, funcs)

        if 'sentiment' in config.ini['DEFAULT'] and int(config.ini['DEFAULT']['sentiment']) == 1:
            run_funcs(corpus, ['add_sentimant_to_doc'])

        if 'get_bigrams' in config.ini['DEFAULT'] and int(config.ini['DEFAULT']['get_bigrams']) == 1:
            run_funcs(corpus, ['add_tables_ngram_and_docngram'], arg_dict=dict(n=2))
            run_funcs(corpus, ['add_stats_to_ngrams'], arg_dict=dict(type='bi'))

        if 'get_trigrams' in config.ini['DEFAULT'] and int(config.ini['DEFAULT']['get_trigrams']) == 1:
            run_funcs(corpus, ['add_tables_ngram_and_docngram'], arg_dict=dict(n=3))
            run_funcs(corpus, ['add_stats_to_ngrams'], arg_dict=dict(type='tri'))

        run_funcs(corpus, ['export_mallet_corpus'])

        mallet = PoloMallet(config)
        print('Converting corpus for mallet')
        mallet.mallet_import()

    elif args.cmd == 'test':

        print("Importing config")
        config = load_config(args.ini)

        print("Initializing corpus")
        corpus = load_corpus(config)

        mallet = PoloMallet(config)
        print('Converting corpus for mallet')
        mallet.mallet_import()

    elif args.cmd == 'mallet':

        print("Import config")
        config = load_config(args.ini)
        trials = get_trials(config)

        this_trial = trials[0]  # Or just default to 'trial1'?
        if args.trial:
            #fixme: Check for valid trial name
            this_trial = args.trial

        print("Initializing mallet for {}".format(this_trial))
        mallet = load_mallet(config, this_trial)
        if args.topics:
            #fixme: Check for valid topic num
            print("Overriding num topics to", args.topics)
            mallet.cfg_num_topics = args.topics  #fixme: NOT WORKING

        # del_mallet_files
        funcs = """
        mallet_train
        tables_to_db
        add_diagnostics
        add_topic_entropy
        create_table_topicpair
        add_group_field_tables
        add_topic_alpha_stats
        add_doctopic_weight_stats
        add_doctopic_entropy_stats
        add_topic_significance        
        add_topic_glosses
        add_maxtopic_to_word
        add_maxtopic_to_doc
        add_topic_clustering
        """.split()
        run_funcs(mallet, funcs)

        groups = config.get_group_fields()
        print('Groups', groups)
        for group in groups:
            # mallet.create_topicdoc_group_matrix(group_field=group)
            run_funcs(mallet, ['create_topicdoc_group_matrix'], arg_dict=dict(group_field=group))

        print("Done with", mallet.trial_name)

    elif args.cmd == 'info':

        if args.item == 'trials':
            config = PoloConfig(args.ini)
            trials = config.get_trial_names()
            # GET MORE INFO TO SHOW, e.g. num topics, etc.
            print('TRIALS:\n', '\n'.join(trials))

    elif args.cmd == 'setup':
        slug = args.project
        print("Setting up things for project `{}`".format(slug))

        # CREATE DIRECTORY
        if os.path.isdir(slug):
            r = input("Path already exists. Proceed? [y/n] ")
            if r != 'y':
                print("OK, ciao.")
                sys.exit(1)
        else:
            print("Creating subdir `{}`".format(slug))
            os.mkdir(slug)

        # CREATE CONFIG.INI
        cfg_file = '{}/config.ini'.format(slug)
        if not os.path.isfile(cfg_file):
            print("Creating INI file template `{}`.".format(cfg_file))
            print("When this process is done, edit this file with sensible values.")
            config = PoloConfig(cfg_file, create=True, slug=slug)
        else:
            print("INI file `{}` already exists.".format(cfg_file))

        # CREATE SUBDIRECTORIES
        subdirs = ['corpus', 'trials']
        for subdir in subdirs:
            path = '{}/{}'.format(slug, subdir)
            if not os.path.isdir(path):
                print("Creating subdirectory `{}`.".format(subdir))
                os.mkdir(path)
            else:
                print("Subdirectory `{}` exists.".format(subdir))

    elif args.cmd == 'retro':
        print("Import config")
        config = load_config(args.ini)
        retro = PoloRetro(config)
        retro.retro_combine(args.corpus_dbfile, args.model_dbfile)
        retro.create_all_tables()

    elif args.cmd == 'ini':
        ini_file = 'config.ini'
        if args.name:
            ini_file = args.name
        if not os.path.isfile(ini_file):
            print("Creating INI file template `{}`. "
                "When this process is done, edit "
                "this file with sensible values.".format(ini_file))
            config = PoloConfig(ini_file, create=True)
        else:
            print("INI file `{}` already exists.".format(ini_file))

    elif args.cmd == 'sequence':
        config = load_config(args.ini)
        obj = None
        if args.obj == 'mallet':
            obj = load_mallet(config)
        elif args.obj == 'corpus':
            obj = load_corpus(config)
        try:
            sequence = sequences[args.obj][args.seq]
            run_funcs(obj, sequence)
        except KeyError as e:
            print('Bad key:', e)
            
    elif args.cmd == 'function':
        config = load_config(args.ini)
        obj = None
        if args.obj == 'mallet':
            obj = load_mallet(config, args.trial)
        elif args.obj == 'corpus':
            obj = load_corpus(config)
        try:
            run_funcs(obj, [args.func])
        except KeyError as e:
            print('Bad key:', e)
        

    else:
        parser.print_help()
        sys.exit()

